// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// SmsTemplateConfigDao is the data access object for table sms_template_config.
type SmsTemplateConfigDao struct {
	dao_interface.IDao
	table       string                   // table is the underlying table name of the DAO.
	group       string                   // group is the database configuration group name of current DAO.
	columns     SmsTemplateConfigColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// SmsTemplateConfigColumns defines and stores column names for table sms_template_config.
type SmsTemplateConfigColumns struct {
	Id                     string // ID
	TemplateCode           string // 模版Code
	TemplateName           string // 模版名称
	TemplateContent        string // 模版内容
	ThirdPartyTemplateCode string // 第三方模版Code
	ProviderNo             string // 渠道商编号
	Remark                 string // 备注
	Status                 string // 状态: 0禁用 1正常
	AuditUserId            string // 审核者UserID 审核者UserID
	AuditReplyMsg          string // 审核回复，仅审核不通过时才有值
	AuditAt                string // 审核时间
	ExtJson                string // 拓展字段
	UnionMainId            string // 关联主体ID
	SignName               string // 签名名称
	CreatedAt              string //
	UpdatedAt              string //
	DeletedAt              string //
	Type                   string // 业务场景类型：1注册，2登录，4找回用户名/修改用户名，8找回密码/重置密码，16设置手机号码，32设置邮箱，64忘记用户名&密码
}

// smsTemplateConfigColumns holds the columns for table sms_template_config.
var smsTemplateConfigColumns = SmsTemplateConfigColumns{
	Id:                     "id",
	TemplateCode:           "template_code",
	TemplateName:           "template_name",
	TemplateContent:        "template_content",
	ThirdPartyTemplateCode: "third_party_template_code",
	ProviderNo:             "provider_no",
	Remark:                 "remark",
	Status:                 "status",
	AuditUserId:            "audit_user_id",
	AuditReplyMsg:          "audit_reply_msg",
	AuditAt:                "audit_at",
	ExtJson:                "ext_json",
	UnionMainId:            "union_main_id",
	SignName:               "sign_name",
	CreatedAt:              "created_at",
	UpdatedAt:              "updated_at",
	DeletedAt:              "deleted_at",
	Type:                   "type",
}

// NewSmsTemplateConfigDao creates and returns a new DAO object for table data access.
func NewSmsTemplateConfigDao(proxy ...dao_interface.IDao) *SmsTemplateConfigDao {
	var dao *SmsTemplateConfigDao
	if len(proxy) > 0 {
		dao = &SmsTemplateConfigDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     smsTemplateConfigColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &SmsTemplateConfigDao{
		group:   "default",
		table:   "sms_template_config",
		columns: smsTemplateConfigColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *SmsTemplateConfigDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *SmsTemplateConfigDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *SmsTemplateConfigDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *SmsTemplateConfigDao) Columns() SmsTemplateConfigColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *SmsTemplateConfigDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *SmsTemplateConfigDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *SmsTemplateConfigDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *SmsTemplateConfigDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *SmsTemplateConfigDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *SmsTemplateConfigDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *SmsTemplateConfigDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
