// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// SmsServiceProviderConfigDao is the data access object for table sms_service_provider_config.
type SmsServiceProviderConfigDao struct {
	dao_interface.IDao
	table       string                          // table is the underlying table name of the DAO.
	group       string                          // group is the database configuration group name of current DAO.
	columns     SmsServiceProviderConfigColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// SmsServiceProviderConfigColumns defines and stores column names for table sms_service_provider_config.
type SmsServiceProviderConfigColumns struct {
	Id              string // 渠道商id
	ProviderNo      string // 渠道商编号
	ProviderName    string // 渠道商名字
	AccessKeyId     string // 身份标识
	AccessKeySecret string // 身份认证密钥
	Endpoint        string // 域名调用
	SdkAppId        string // 应用id
	Region          string // 地域
	Remark          string // 备注
	Status          string // 状态: 0禁用 1正常
	ExtJson         string // 拓展字段
	CreatedAt       string //
	UpdatedAt       string //
	DeletedAt       string //
	Priority        string // 优先级，使用默认选择优先级最高的
	IsDefault       string // 是否默认：true是、false否 ，默认false
}

// smsServiceProviderConfigColumns holds the columns for table sms_service_provider_config.
var smsServiceProviderConfigColumns = SmsServiceProviderConfigColumns{
	Id:              "id",
	ProviderNo:      "provider_no",
	ProviderName:    "provider_name",
	AccessKeyId:     "access_key_id",
	AccessKeySecret: "access_key_secret",
	Endpoint:        "endpoint",
	SdkAppId:        "sdk_app_id",
	Region:          "region",
	Remark:          "remark",
	Status:          "status",
	ExtJson:         "ext_json",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	DeletedAt:       "deleted_at",
	Priority:        "priority",
	IsDefault:       "is_default",
}

// NewSmsServiceProviderConfigDao creates and returns a new DAO object for table data access.
func NewSmsServiceProviderConfigDao(proxy ...dao_interface.IDao) *SmsServiceProviderConfigDao {
	var dao *SmsServiceProviderConfigDao
	if len(proxy) > 0 {
		dao = &SmsServiceProviderConfigDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     smsServiceProviderConfigColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &SmsServiceProviderConfigDao{
		group:   "default",
		table:   "sms_service_provider_config",
		columns: smsServiceProviderConfigColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *SmsServiceProviderConfigDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *SmsServiceProviderConfigDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *SmsServiceProviderConfigDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *SmsServiceProviderConfigDao) Columns() SmsServiceProviderConfigColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *SmsServiceProviderConfigDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *SmsServiceProviderConfigDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *SmsServiceProviderConfigDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *SmsServiceProviderConfigDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *SmsServiceProviderConfigDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *SmsServiceProviderConfigDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *SmsServiceProviderConfigDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
